"""该脚本有3个功能：1.统计训练集和验证集的数据并生成相应.txt文件2.创建data.data文件，记录classes个数, train以及val数据集文件(.txt)路径和label.names文件路径3.根据yolov3-spp.cfg创建my_yolov3.cfg文件修改其中的predictor filters以及yolo classes参数(这两个参数是根据类别数改变的)"""import ostrain_annotation_dir = "Kaist_YOLO/train/labels"val_annotation_dir = "Kaist_YOLO/val/labels"test_annotation_dir = "Kaist_YOLO/test/labels"night_test_annotation_dir = "Kaist_YOLO/night_test/labels"day_test_annotation_dir = "Kaist_YOLO/day_test/labels"classes_label = "data/kaist_data_label.names"assert os.path.exists(train_annotation_dir), "train_annotation_dir not exist!"assert os.path.exists(val_annotation_dir), "val_annotation_dir not exist!"assert os.path.exists(classes_label), "classes_label not exist!"def calculate_data_txt(txt_path, dataset_dir):    # create my_data.txt file that record image list    with open(txt_path, "w") as w:        for file_name in os.listdir(dataset_dir):            if file_name == "classes.txt":                continue            # 确认下这些可见光图像和对应红外光图像是否真的存在            img_path = os.path.join(dataset_dir.replace("labels", "images"),                                    file_name.replace(".txt", ".jpg"))            visible_img_path = img_path.replace(".jpg", "_visible.jpg")            lwir_img_path = img_path.replace(".jpg", "_lwir.jpg")            assert os.path.exists(visible_img_path), "visible image: {} not exist!".format(visible_img_path)            assert os.path.exists(lwir_img_path), "lwir image: {} not exist!".format(lwir_img_path)            w.write(img_path + "\n")def create_data_data(create_data_path, label_path, train_path, val_path, test_path, night_test_path,                     day_test_path, classes_info):    # create my_data.data file that record classes, train, valid and names info.    # shutil.copyfile(label_path, "./data/my_data_label.names")    with open(create_data_path, "w") as w:        w.write("classes={}".format(len(classes_info)) + "\n")  # 记录类别个数        w.write("train={}".format(train_path) + "\n")  # 记录训练集对应txt文件路径        w.write("valid={}".format(val_path) + "\n")  # 记录验证集对应txt文件路径        w.write("test={}".format(test_path) + "\n")  # 记录全天候测试集对应txt文件路径        w.write("night_test={}".format(night_test_path) + "\n")  # 记录夜间测试集对应txt文件路径        w.write("day_test={}".format(day_test_path) + "\n")  # 记录白天测试集对应txt文件路径        w.write("names=data/kaist_data_label.names" + "\n")  # 记录label.names文件路径def change_and_create_cfg_file(classes_info, save_cfg_path="./config/kaist_yolov3.cfg"):    # TODO: 当前的模型配置文件cfg还是最好自己设计，除非只是小的改动（比如最后一个预测层输出向量大小这样的简单设置）    # create my_yolov3.cfg file changed predictor filters and yolo classes param.    # this operation only deal with yolov3-spp.cfg    filters_lines = [636, 722, 809]    classes_lines = [643, 729, 816]    cfg_lines = open(cfg_path, "r", encoding='utf-8').readlines()    for i in filters_lines:        assert "filters" in cfg_lines[i - 1], "filters param is not in line:{}".format(i - 1)        output_num = (5 + len(classes_info)) * 3        cfg_lines[i - 1] = "filters={}\n".format(output_num)    for i in classes_lines:        assert "classes" in cfg_lines[i - 1], "classes param is not in line:{}".format(i - 1)        cfg_lines[i - 1] = "classes = {}\n".format(len(classes_info))    with open(save_cfg_path, "w") as w:        w.writelines(cfg_lines)def main():    # 统计训练集和验证集的数据并生成相应txt文件    train_txt_path = "data/kaist_train_data.txt"    val_txt_path = "data/kaist_val_data.txt"    test_txt_path = "data/kaist_test_data.txt"    night_test_txt_path = "data/kaist_night_test_data.txt"    day_test_txt_path = "data/kaist_day_test_data.txt"    calculate_data_txt(train_txt_path, train_annotation_dir)    calculate_data_txt(val_txt_path, val_annotation_dir)    calculate_data_txt(test_txt_path, test_annotation_dir)    calculate_data_txt(night_test_txt_path, night_test_annotation_dir)    calculate_data_txt(day_test_txt_path, day_test_annotation_dir)    classes_info = [line.strip() for line in open(classes_label, "r").readlines() if len(line.strip()) > 0]    # 创建data.data文件，记录classes个数, train以及val数据集文件(.txt)路径和label.names文件路径    create_data_data("./data/kaist_data.data", classes_label, train_txt_path, val_txt_path, test_txt_path,                     night_test_txt_path, day_test_txt_path, classes_info)    # 根据现有的cfg文件创建新模型的配置文件，主要就是修改其中的predictor filters以及yolo classes参数(这两个参数是根据类别数改变的)    # change_and_create_cfg_file(classes_info)if __name__ == '__main__':    main()